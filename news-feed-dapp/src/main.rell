module;

entity user {
    mutable name;
    key id: byte_array;
}

entity follower {
    index user;
    index follower: user;
    key user, follower;
}

entity post {
    timestamp = op_context.last_block_time;
    index user;
    content: text;
}



// structs

struct post_dto {
    timestamp;
    user: struct<user>;
    content: text;
}


// helper functions

function require_is_signer(pubkey) {
    require(op_context.is_signer(pubkey), "user must sign this opration");
}

function format_user(user) = "%s#%s".format(user.name, user.id.to_hex().sub(0,5));

function require_user(id: byte_array) = require(user @? {id}, "user with id %b does not exists".format(id));

operation create_user(name: text, pubkey: byte_array) {
    create user(name, pubkey);
}

operation make_post(user_id: byte_array, content: text) {
    require_is_signer(user_id);
    require(content.size() <= 255, "a post can not be longer that 255 letters");
    val user = require_user(user_id);
    create post( user, content );
}

operation follow_user(user_id: byte_array, follow_id: byte_array) {
    require_is_signer(user_id);
    val user = require_user(user_id);
    val follow = require_user(follow_id);

    create follower(
        user = follow,
        follower = user,
    );
}

operation unfollow_user(user_id: byte_array, unfollow_id: byte_array) {
    require_is_signer(user_id);

    val user = require_user(user_id);
    val unfollow = require_user(unfollow_id);
    delete follower @? {
        .user == unfollow,
        .follower == user,
    };
}

// queries

query get_user_name(user_id: byte_array) {
    return user @ { user_id } ("%s#%s".format(.name, .id.to_hex().sub(0, 5)));
}

query get_followers_count(user_id: byte_array) {
    val user = user @ { user_id };
    return follower @ { .user == user } ( @sum 1);
}

query get_following_count(user_id: byte_array) {
    val user = user @ { user_id };
    return follower @ { .follower == user } ( @sum 1);
}

query is_following(follower_id: byte_array, follow_id: byte_array) = 
    exists(follower @? {.user.id == follow_id , .follower.id == follower_id });


query get_posts(user_id: byte_array, pointer: integer, n_posts: integer): (pointer: integer, posts: list<post_dto>) {
    val posts = (user, follower, post ) @* {
        user.id == user_id,
        follower.follower == user,
        post.user == follower.user
    } (
        @sort_desc @omit post.timestamp,
        post_dto(
            post.timestamp,
            post.content,
            user = post.user.to_struct()
        )
    ) offset pointer limit n_posts;

    return (
        pointer = pointer + posts.size(),
        posts = posts
    );
}


query get_users(pointer: integer, n_users: integer) {
    val users = user @* {} ( name = "%s#%s".format(.name, .id.to_hex().sub(0, 5)), id = .id ) offset pointer limit n_users;
    return (
        pointer = pointer + users.size(),
        users = users,
    );
}